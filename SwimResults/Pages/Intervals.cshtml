@page
@using Microsoft.AspNetCore.Http.Extensions
@model SwimResults.Pages.IntervalsModel

@{
    ViewData["Title"] = "Intervals";
}

<h1>Intervals</h1>

<form method="get">
    <div class="form-inline">
        <label asp-for="SelectedIntervalType" class="col-form-label  mr-2">Interval type</label>
        <select id="IntervalType" asp-for="SelectedIntervalType" asp-items="Model.WorkoutIntervalTypeSelectList" class="form-control" onchange="this.form.submit()">
            <option value="">Select interval type</option>
        </select>
    </div>
    <br/>
</form>

<table class="table">
    <thead>
        <tr>
            @{
                var upDown = Model.Intervals.ReversedOrder ? "down" : "up";
                var sortIndicator = $" <i class=\"fas fa-sort-{upDown}\"></i>";
            }
            <th>
                @{
                    var dateSort = Model.Intervals.IsCurrentSortOrder[IntervalsModel.DateFieldName] ? sortIndicator : "";
                    var routeParams = Model.Intervals.SortRouteValues[IntervalsModel.DateFieldName];
                }
                <a asp-page="Intervals" asp-all-route-data="routeParams">@Html.DisplayNameFor(m => m.Intervals[0].WorkoutDate)</a>@Html.Raw(dateSort)
            </th>
            <th>
                @{
                    var distanceSort = Model.Intervals.IsCurrentSortOrder[IntervalsModel.DistanceFieldName] ? sortIndicator : "";
                    routeParams = Model.Intervals.SortRouteValues[IntervalsModel.DistanceFieldName];
                }
                <a asp-page="Intervals" asp-all-route-data="routeParams">@Html.DisplayNameFor(m => m.Intervals[0].Distance)</a>@Html.Raw(distanceSort)
            </th>
            <th>
                @{
                    var durationSort = Model.Intervals.IsCurrentSortOrder[IntervalsModel.DurationFieldName] ? sortIndicator : "";
                    routeParams = Model.Intervals.SortRouteValues[IntervalsModel.DurationFieldName];
                }
                <a asp-page="Intervals" asp-all-route-data="routeParams">@Html.DisplayNameFor(m => m.Intervals[0].Duration)</a>@Html.Raw(durationSort)
            </th>
            <th>
                @{
                    var paceSort = Model.Intervals.IsCurrentSortOrder[IntervalsModel.PaceFieldName] ? sortIndicator : "";
                    routeParams = Model.Intervals.SortRouteValues[IntervalsModel.PaceFieldName];
                }
                <a asp-page="Intervals" asp-all-route-data="routeParams">@Html.DisplayNameFor(m => m.Intervals[0].Pace)</a>@Html.Raw(paceSort)               
            </th>
            <th>
                @{
                    var strokeCountSort = Model.Intervals.IsCurrentSortOrder[IntervalsModel.StrokeCountFieldName] ? sortIndicator : "";
                    routeParams = Model.Intervals.SortRouteValues[IntervalsModel.StrokeCountFieldName];
                }
                <a asp-page="Intervals" asp-all-route-data="routeParams">@Html.DisplayNameFor(m => m.Intervals[0].StrokeCount)</a>@Html.Raw(strokeCountSort)
            </th>
            <th>
                @{
                    var swolfSort = Model.Intervals.IsCurrentSortOrder[IntervalsModel.SwolfFieldName] ? sortIndicator : "";
                    routeParams = Model.Intervals.SortRouteValues[IntervalsModel.SwolfFieldName];
                }
                <a asp-page="Intervals" asp-all-route-data="routeParams">@Html.DisplayNameFor(m => m.Intervals[0].Swolf)</a>@Html.Raw(swolfSort)                
            </th>
            <th>
                @Html.DisplayNameFor(m => m.Intervals[0].StrokeTypeId)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Intervals)
        {
        <tr>
            <td>
                @{ routeParams = new Dictionary<string, string> { { "id", item.WorkoutId.ToString() }, { "returnPath", Request.GetEncodedPathAndQuery() } }; }
                <a asp-page="Details" asp-all-route-data="routeParams">@Html.DisplayFor(i => item.WorkoutDate)</a>
            </td>
            <td>
                @Html.DisplayFor(i => item.Distance) m
            </td>
            <td>
                @Html.DisplayFor(i => item.DurationFormattedWithMs)
            </td>
            <td>
                @Html.DisplayFor(i => item.PaceFormatted)
            </td>
            <td>
                @Html.DisplayFor(i => item.StrokeCountFormatted)
            </td>
            <td>
                @Html.DisplayFor(i => item.SwolfFormatted)
            </td>
            <td>
                @Html.DisplayFor(i => item.StrokeTypeName)
            </td>
            <td>
                @{ routeParams["id"] = item.Id.ToString(); }
                <a asp-page="IntervalDetails" asp-all-route-data="routeParams">Details</a>
            </td>
        </tr>
        }
    </tbody>
</table>

@if (Model.Intervals.Count > 0)
{
<text>
    <a asp-page="./Intervals" asp-all-route-data="Model.Intervals.FirstPageRouteValues" class="btn @Model.Intervals.PrevPageDisabledClass"><i class="fas fa-angle-double-left"></i></a>
    <a asp-page="./Intervals" asp-all-route-data="Model.Intervals.PrevPageRouteValues" class="btn @Model.Intervals.PrevPageDisabledClass"><i class="fas fa-angle-left"></i></a>
    Page @Model.Intervals.PageNo.ToString() of @Model.Intervals.TotalPages.ToString()
    <a asp-page="./Intervals" asp-all-route-data="Model.Intervals.NextPageRouteValues" class="btn @Model.Intervals.NextPageDisabledClass"><i class="fas fa-angle-right"></i></a>
    <a asp-page="./Intervals" asp-all-route-data="Model.Intervals.LastPageRouteValues" class="btn @Model.Intervals.NextPageDisabledClass"><i class="fas fa-angle-double-right"></i></a>
</text>
}
