// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190816165144_Swolf_Calculation")]
    partial class Swolf_Calculation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Models.Workout", b =>
                {
                    b.Property<int>("Id");

                    b.Property<float>("ActiveTime");

                    b.Property<float>("CourseLength");

                    b.Property<DateTime>("Date");

                    b.Property<float>("Distance");

                    b.Property<float>("Duration");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Note")
                        .HasMaxLength(1000);

                    b.Property<float>("Pace");

                    b.Property<string>("Place")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("DataAccess.Models.WorkoutInterval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Distance")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("dbo.fnGetIntervalDistance(Id)");

                    b.Property<float>("Duration")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("dbo.fnGetIntervalDuration(Id)");

                    b.Property<int?>("IntervalNo");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000);

                    b.Property<float?>("Pace")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("case when dbo.fnGetIntervalDistance(Id)=0 then null else dbo.fnGetIntervalDuration(Id) * 100 / dbo.fnGetIntervalDistance(Id) end");

                    b.Property<float>("StrokeCount");

                    b.Property<int?>("StrokeTypeId")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("dbo.fnGetIntervalStrokeType(Id)");

                    b.Property<float?>("Swolf")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("case when dbo.fnGetIntervalDistance(Id)=0 then null else dbo.fnGetIntervalDuration(Id) * 50 / dbo.fnGetIntervalDistance(Id) + StrokeCount * 2 end");

                    b.Property<float>("TimeOffset");

                    b.Property<int>("WorkoutId");

                    b.Property<int?>("WorkoutIntervalTypeId");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutId");

                    b.HasIndex("WorkoutIntervalTypeId");

                    b.ToTable("WorkoutIntervals");
                });

            modelBuilder.Entity("DataAccess.Models.WorkoutIntervalLength", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Distance");

                    b.Property<float>("Duration");

                    b.Property<int?>("LengthNo");

                    b.Property<int>("StrokeCount");

                    b.Property<int>("StrokeTypeId");

                    b.Property<int>("WorkoutIntervalId");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutIntervalId");

                    b.ToTable("WorkoutIntervalLengths");
                });

            modelBuilder.Entity("DataAccess.Models.WorkoutIntervalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("WorkoutIntervalType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Warm up"
                        },
                        new
                        {
                            Id = 2,
                            Name = "First quick freestyle"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Second quick freestyle"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Drill with fins"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Drill (other)"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Freestyle series"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Freestyle series with pull-buoy"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Freestyle series with paddles"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Final quick freestyle"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Backstroke"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Manually added"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Pre warm-up"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Intermediate quick freestyle"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Final quick freestyle 2"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Other freestyle"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.WorkoutInterval", b =>
                {
                    b.HasOne("DataAccess.Models.Workout", "Workout")
                        .WithMany("Intervals")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.Models.WorkoutIntervalType", "WorkoutIntervalType")
                        .WithMany()
                        .HasForeignKey("WorkoutIntervalTypeId");
                });

            modelBuilder.Entity("DataAccess.Models.WorkoutIntervalLength", b =>
                {
                    b.HasOne("DataAccess.Models.WorkoutInterval", "WorkoutInterval")
                        .WithMany("Lengths")
                        .HasForeignKey("WorkoutIntervalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
